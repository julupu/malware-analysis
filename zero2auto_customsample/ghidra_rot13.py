#TODO write a description for this script
#@author 
#@category _NEW_
#@keybinding 
#@menupath 
#@toolbar 


import string
import sys
from ghidra.program.model.symbol import SourceType


def rot13(string):
    trans = str.maketrans("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890./=", "nopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890./=abcdefghijklm")
    return str.translate(string, trans)


def main(arguments):

	# Hardcoded function which performes the decryption (can be function name or address)
	rot13_function = "rot13" 


	refs = getReferencesTo(toAddr(rot13_function))

	# Iterate references to decryption function
	for ref in refs:
		cur_instr = getInstructionAt(ref.getFromAddress())

		# Find argument to function, in this sample -> String reference moved into ECX (fastcall)
		for i in range(1,5):	
			cur_instr = getInstructionBefore(cur_instr)
			if(cur_instr.getMnemonicString() == "MOV" and str(cur_instr.getOpObjects(0)[0])=="ECX"):
				string_arg = cur_instr.getOpObjects(1)[0]
				break

		# Get string from reference
		data = getDataAt(toAddr(str(string_arg)))
		try:
			data_str = data.getValue()
		except:
			print("ERROR Couldnt get data at " + string_arg.toString())

		# Decrypt string
		decrypted = rot13(data_str)

		# Get Symbol
		sym = getSymbolAt(toAddr(str(string_arg)))

		# Change symbol name based on decrypted string
		sym.setName("rot13_"+decrypted, SourceType.USER_DEFINED)


if __name__ == '__main__':
    main(sys.argv[1:])

