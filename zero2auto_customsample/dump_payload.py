import sys
import pefile
import argparse
from Crypto.Cipher import ARC4


def main(arguments):
	
	parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.RawDescriptionHelpFormatter)
	parser.add_argument('file', help="file", type=str)
	args = parser.parse_args(arguments)

	pe = pefile.PE(args.file)
	
	key_offset = 0xc
	key_length = 0xf
	payload_offset = 0x1c
	res_id = 101
	restype = 'RT_RCDATA'
	
	rt_idx = [ entry.id for entry in pe.DIRECTORY_ENTRY_RESOURCE.entries].index(pefile.RESOURCE_TYPE[restype])

    # Get the directory entry
	rt_directory = pe.DIRECTORY_ENTRY_RESOURCE.entries[rt_idx]

    # For each of the entries
	for entry in rt_directory.directory.entries:
		
		# Check resource ID
		if(entry.id != res_id):
			continue

        # Get the RVA of the data and size of the data
		offset = entry.directory.entries[0].data.struct.OffsetToData
		size = entry.directory.entries[0].data.struct.Size

        # Retrieve data
		key = pe.get_memory_mapped_image()[offset+key_offset:offset+key_offset+key_length]
		data = pe.get_memory_mapped_image()[offset+payload_offset:offset+size-payload_offset]


	rc4 = ARC4.new(key)
	decrypted_payload = rc4.decrypt(data)
	print("Key: " + key.decode('utf-8'))
	print("Writing payload to payload.bin")
	try:
		f = open("payload.bin", "wb")
		f.write(decrypted_payload)
		f.close()
	except:
		print("Couldnt write to file")

if __name__ == '__main__':
    main(sys.argv[1:])

